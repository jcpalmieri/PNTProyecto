@model PNTProyecto.Models.Publicacion

@{
    ViewData["Title"] = "Editar Publicación";
}

<h2>@ViewData["Title"]</h2>

    <h4>Publicación</h4>
    <hr />
    <div class="row">
        <div class="col-md-4">
            @using (Html.BeginForm("Edit", "Publicaciones", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                @Html.HiddenFor(model => model.nroPublicacion) 
                <div class="form-group">
                    @Html.LabelFor(model => model.NombreMascota, "Nombre de mascota: ", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.NombreMascota, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.NombreMascota, "", new { @class = "text-danger" })
                    </div>
                </div>
          

                <div class="form-group">

                        <div class="form-group">
                            @Html.Label("Imagen actual")
                      
                            @if (!string.IsNullOrEmpty(Model.Imagen))
                            {
                                <img src="@Model.Imagen" alt="Imagen de Perfil" class="profile-image" />                           
                            }
                        </div>
                        <div class="hidden-div">
                            @Html.LabelFor(model => model.Imagen, htmlAttributes: new { @class = "control-label col-md-2" })
                        
                    <div class="col-md-10"> 
                        @Html.EditorFor(model => model.Imagen, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Imagen, "", new { @class = "text-danger" })
                      </div>
                        </div>
                  </div>
                    <div class="form-group">
                    <div>
                        @Html.LabelFor(model => model.ImagenFile, "Cambiar imagen")
                    </div>
                        <input type="file" name="ImagenFile" class="form-control" accept=".jpg, .jpeg, .png" onchange="previewImage(event)" />
                        @Html.ValidationMessageFor(model => model.ImagenFile, "", new { @class = "text-danger" })
                    </div>
                <div class="form-group preview">
                    <!-- Aquí se mostrará la vista previa de la imagen -->
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Descripcion, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.TextAreaFor(model => model.Descripcion, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Descripcion, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.TipoMascota, "Tipo de mascota", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("TipoMascota", new SelectList(ViewBag.TipoMascotas), "-- Seleccione --", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.TipoMascota, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Contacto, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Contacto, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Contacto, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                      
                        <!-- Botón para enviar el formulario -->
                        <button type="submit" class="btn btn-primary">Guardar</button>
                        <!-- Botón para cancelar -->
                        <button type="button" class="btn btn-primary" onclick="cancelar()">Cancelar</button>

                </div>
            </div>
            }
        </div>
    </div>
</div>



@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        function cancelar() {
            window.history.back();
        }
    </script>
    <script>
        function previewImage(event) {
            var reader = new FileReader();
            reader.onload = function () {
                var output = document.createElement('img');
                output.src = reader.result;
                output.classList.add('preview-image');
                var container = document.querySelector('.preview');
                container.innerHTML = '';
                container.appendChild(output);
            };
            reader.readAsDataURL(event.target.files[0]);
        }
    </script>
}

<style>
     .hidden-div {
        display: none;
    }

    body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        background-color: #1a1a1a; /* Color de fondo oscuro */
        color: #eee; /* Color de texto claro */
    }

    h2 {
        color: #4CAF50; /* Color del título */
        margin-bottom: 20px;
    }

    h4 {
        color: #ccc; /* Color del subtítulo */
    }

    hr {
        border-color: #444; /* Color de la línea divisoria */
        margin-top: 10px;
        margin-bottom: 20px;
    }

    .form-horizontal .control-label {
        color: #ccc; /* Color de las etiquetas de los campos */
    }

    .form-control {
        background-color: #333; /* Color de fondo del input */
        color: #eee; /* Color del texto dentro del input */
        border: 1px solid #555; /* Borde del input */
    }

        .form-control:focus {
            border-color: #4CAF50; /* Color del borde al estar enfocado */
        }

    .text-muted {
        color: #888; /* Color del texto pequeño */
    }

    .btn-primary {
        background-color: #4CAF50; /* Color de fondo del botón */
        border: none;
    }

        .btn-primary:hover {
            background-color: #45a049; /* Color de fondo del botón al pasar el mouse */
        }

    .text-danger {
        color: #ff6666; /* Color del texto de error */
    }

    .col-md-offset-2 {
        margin-left: 16.66666667%; /* Alineación del botón */
    }

    a {
        color: #4CAF50; /* Color del enlace */
    }

        a:hover {
            text-decoration: none;
            color: #45a049; /* Color del enlace al pasar el mouse */
        }

    .profile-image {
        max-width: 150px;
        max-height: 150px;
        border-radius: 50%;
        display: block;
        margin: 0 0 20px 0;
    }

    .preview-image {
        width: 150px;
        height: 150px;
        object-fit: cover; /* Para mantener las proporciones */
    }

    
</style>

